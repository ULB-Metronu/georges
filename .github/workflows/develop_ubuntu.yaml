# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: develop-ubuntu

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install --no-interaction -E sphinx
      #----------------------------------------------
      #              link with flake8
      #----------------------------------------------
      - name: Link with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests and collect coverage
        run: |
          source .venv/bin/activate
          pytest tests/ --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
